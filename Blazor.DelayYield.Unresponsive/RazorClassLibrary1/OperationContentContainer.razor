@using System.ComponentModel
@inherits ActiveContentTemplateComponentBase<string>

@if (Subject is null)
{
	@NotAssignedTemplate
}
else if (Subject is {IsFaulted : true })
{
	@ExceptionTemplate
}
else if (!Loaded)
{
	@LoadingTemplate
}
else if (Subject is {Result: not null})
{
	@ChildContent(Subject.Result)
}
else
{
	@NotAssignedTemplate
}

@code
{
	[Parameter]
	public HelloWorld? Content
	{
		get => _content;
		set
		{
			if (_content != value && value is not null)
			{
				_content = value;
				Subject = null;
			}
		}
	}	HelloWorld? _content;

	Task<string?>? Subject { get; set; }

	bool Loaded
	{
		get => _loaded;
		set
		{
			if (_loaded != value)
			{
				_loaded = value;
				if (value)
				{
					StateHasChanged();
				}
			}
		}
	}	bool _loaded;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Subject ??= DetermineSubject();
		Update();
	}

	protected override Task OnParametersSetAsync() => Subject ?? base.OnParametersSetAsync();

	Task<string?> DetermineSubject()
	{
		try
		{
			var content = Content ?? throw new InvalidOperationException();
			var result = content.Get();
			return result;
		}
		catch (Exception e)
		{
			// This is never reached.
			Console.WriteLine(e);
			throw;
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		Update();
	}

	void Update()
	{
		Loaded |= Subject is { IsCompletedSuccessfully: true };
	}

}